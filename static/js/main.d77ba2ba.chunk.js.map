{"version":3,"sources":["components/Loading.jsx","components/Card.jsx","components/CovidMap.jsx","entities/LegendItem.js","entities/LegendItems.js","tasks/LoadCountriesTask.js","components/Legend.jsx","components/Covid19.jsx","App.js","reportWebVitals.js","index.js"],"names":["Loading","style","height","display","justifyContent","alignItems","className","role","Card","width","src","alt","CovidMap","countries","MapContainer","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","country","layer","options","properties","name","ADMIN","confirmedText","bindPopup","LegendItem","title","isFor","textColor","this","legendItems","cases","LoadCountryTask","covidUrl","setState","load","papa","parse","download","header","complete","result","covidCountries","i","features","covidCountry","find","ISO_A3","ISO3","confirmed","Number","Confirmed","length","legendItem","item","number","toString","replace","Legend","console","log","map","backgroundColor","flex","fontWeight","fontSize","Covid19","useState","setCountries","legendItemsReverse","reverse","useEffect","LoadCountriesTask","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d77ba2ba.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading = () => {\n    return ( \n    <div\n    style={{\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems:\"center\"\n    }}>\n        <div className=\"spinner-grow text-success\" role=\"status\">\n        </div>\n        <div className=\"spinner-border text-primary\" role=\"status\">\n        </div>\n        <div className=\"spinner-grow text-warning\" role=\"status\">\n        </div>\n        <div className=\"spinner-border text-info\" role=\"status\">\n        </div>\n        <div className=\"spinner-grow text-danger\" role=\"status\">\n        </div>\n    </div> \n    );\n}\n\nexport default Loading;","const Card = () => {\n    return ( \n        <div className=\"card\" style={{width: \"18rem\"}}>\n            <img src=\"...\" className=\"card-img-top\" alt=\"...\"></img>\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">.</h5>\n                <h5 className=\"card-title\">World</h5>\n                <h5 className=\"card-title\">Covid 19 Map</h5>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Card from './Card';\nimport \"./CovidMap.css\";\n\nconst CovidMap = ({ countries }) => {\nconst mapStyle = {\n    fillColor: \"white\",\n    weight: 1,\n    color: \"black\",\n    fillOpacity: 1,\n};\n\nconst onEachCountry = (country, layer) => {\n    layer.options.fillColor = country.properties.color;\n    const name = country.properties.ADMIN;\n    const confirmedText = country.properties.confirmedText;\n    layer.bindPopup(`${name} ${confirmedText}`);\n};\n\nreturn (\n    <MapContainer style={{ height: \"90vh\" }} zoom={2} center={[20, 40]}>\n        <GeoJSON\n            style={mapStyle}\n            data={countries}\n            onEachFeature={onEachCountry}\n        />\n        <Card />\n    </MapContainer>\n);\n};\n\nexport default CovidMap;","class LegendItem{\n    constructor(title, color, isFor, textColor){\n        this.title = title;\n        this.color = color;\n        this.isFor = isFor;\n        this.textColor = textColor != null ? textColor : \"black\";\n    }\n}\n\nexport default LegendItem;","import LegendItem from './LegendItem';\n\nconst legendItems = [\n    new LegendItem(\n        \"1,000,001 +\",\n        \"red\",//\"#741f1f\",\n        (cases) => cases >= 1_000_001,\n        \"white\"\n    ),\n    new LegendItem(\n        \"500,001 - 1,000,000\",\n        \"orange\",//\"#9c2929\",\n        (cases) => cases >= 500_001 && cases < 1_000_000,\n        \"white\"\n    ),       \n    new LegendItem(\n        \"200,001 - 500,000\",\n        \"yellow\",//\"#c57f7f\",\n        (cases) => cases >= 200_001 && cases < 500_000,\n    ),       \n    new LegendItem(\n        \"50,001 - 200,000\",\n        \"aqua\",//\"#d8aaaa\",\n        (cases) => cases >= 50_001 && cases < 200_000,\n    ),       \n    new LegendItem(\n        \"1 - 50,000\",\n        \"chartreuse\",//\"#ebd4d4\",\n        (cases) => cases >= 1 && cases < 50_000,\n    ),       \n    new LegendItem(\"No Data\", \"#ffffff\",(cases) => true),       \n];\n\nexport default legendItems;\n","import papa from \"papaparse\";\nimport legendItems from \"../entities/LegendItems\";\nimport { features } from \"../data/countries.json\";\n//    this.setState(features);\n\nclass LoadCountryTask {\n    covidUrl =\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv\";\n\n    setState = null;\n\n    load = (setState) => {\n    this.setState = setState;\n\n    papa.parse(this.covidUrl, {\n        download: true,\n        header: true,\n        complete: (result) => this.#processCovidData(result.data),\n    });\n  };\n\n  #processCovidData = (covidCountries) => {\n    for (let i = 0; i < features.length; i++) {\n      const country = features[i];\n      //console.log(country);\n      const covidCountry = covidCountries.find(\n        (covidCountry) => country.properties.ISO_A3 === covidCountry.ISO3\n      );\n\n      country.properties.confirmed = 0;\n      country.properties.confirmedText = 0;\n\n      if (covidCountry != null) {\n        let confirmed = Number(covidCountry.Confirmed);\n        country.properties.confirmed = confirmed;\n        country.properties.confirmedText = this.#formatNumberWithCommas(\n          confirmed\n        );\n      }\n      this.#setCountryColor(country);\n    }\n\n    this.setState(features);\n  };\n\n  #setCountryColor = (country) => {\n    const legendItem = legendItems.find((item) =>\n      item.isFor(country.properties.confirmed)\n    );\n\n    if (legendItem != null) country.properties.color = legendItem.color;\n  };\n\n  #formatNumberWithCommas = (number) => {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n}\n\nexport default LoadCountryTask;","import React from 'react';\n\nconst Legend = ({legendItems}) => {\n    console.log(legendItems);\n    return (\n      <div \n        style={{\n          display: \"flex\",\n          alignItems: \"stretch\",\n        }}\n      >\n        {legendItems.map((item) => (\n          <div key={item.title}\n          style={{\n            backgroundColor: item.color,\n            flex:1,\n            display: \"flex\",\n            alignItems:\"center\", //vertical control\n            justifyContent:\"center\", //horizontal control\n            color: item.textColor,\n            height:\"10vh\",\n            fontWeight:\"bolder\",\n            fontSize:\"1.5em\", \n          }}>\n            <span>{item.title}</span></div>\n        ))}\n      </div>\n    );\n};\n\nexport default Legend ;","import React, { useState, useEffect } from \"react\";\nimport Loading from \"./Loading\";\nimport CovidMap from \"./CovidMap\";\nimport LoadCountriesTask from \"../tasks/LoadCountriesTask\";\nimport Legend from \"./Legend\";\nimport legendItems from \"../entities/LegendItems\";\n\nconst Covid19 = () => {\n    const [countries, setCountries] = useState([]);\n\n    const legendItemsReverse = [...legendItems].reverse();\n\n    const load = () => {\n        console.log(\"load\");\n        const loadCountriesTask = new LoadCountriesTask();\n        loadCountriesTask.load((countries) => setCountries(countries));\n    };\n\nuseEffect(load, []);\n\n    return (\n    <div>\n        {countries.length === 0 ? (\n        <Loading />\n        ) : (\n        <div>\n            <CovidMap countries={countries} />\n            <Legend legendItems={legendItemsReverse} />\n        </div>\n        )}\n    </div>\n    );\n};\n\nexport default Covid19;","import React from 'react';\nimport Covid19 from './components/Covid19';\n\nfunction App() {\n  return (\n    <div>\n      <Covid19 />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}